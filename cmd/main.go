/*
 * Nchf_BDTPolicyControl Service API
 *
 * The Nchf_BDTPolicyControl Service is used by an NF service consumer to
 * retrieve background data transfer policies from the CHF and to update the CHF with
 * the background data transfer policy selected by the NF service consumer.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"runtime/debug"
	"syscall"

	"github.com/urfave/cli"

	"github.com/comp590/ocss/internal/logger"
	"github.com/comp590/ocss/pkg/factory"
	"github.com/comp590/ocss/pkg/service"
)

var OCSS *service.OCSSApp

func main() {
	defer func() {
		if p := recover(); p != nil {
			// Print stack for panic to log. Fatalf() will let program exit.
			logger.MainLog.Fatalf("panic: %v\n%s", p, string(debug.Stack()))
		}
	}()

	app := cli.NewApp()
	app.Name = "ocss"
	app.Usage = "Optical Switch Circuit System(OCSS)"
	app.Action = action
	app.Flags = []cli.Flag{
		cli.StringFlag{
			Name:  "config, c",
			Usage: "Load configuration from `FILE`",
		},
		cli.StringSliceFlag{
			Name:  "log, l",
			Usage: "Output NF log to `FILE`",
		},
	}
	if err := app.Run(os.Args); err != nil {
		fmt.Printf("OCSS Run Error: %v\n", err)
	}
}

func action(cliCtx *cli.Context) error {
	logPath := "./log/ocss.log"

	ctx, cancel := context.WithCancel(context.Background())
	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, os.Interrupt, syscall.SIGTERM)

	go func() {
		<-sigCh  // Wait for interrupt signal to gracefully shutdown
		cancel() // Notify each goroutine and wait them stopped
	}()

	cfg, err := factory.ReadConfig(cliCtx.String("config"))
	if err != nil {
		sigCh <- nil
		return err
	}
	factory.ChfConfig = cfg

	ocss, err := service.NewApp(ctx, cfg, logPath)
	if err != nil {
		sigCh <- nil
		return err
	}
	OCSS = ocss

	ocss.Start()

	return nil
}
